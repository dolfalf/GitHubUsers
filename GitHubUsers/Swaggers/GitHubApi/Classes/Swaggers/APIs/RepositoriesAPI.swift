//
// RepositoriesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift


open class RepositoriesAPI {
    /**
     Get a repository

     - parameter username: (path) Provides publicly available information about someone with a GitHub account. 
     - parameter repo: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func requestGetRepository(username: String, repo: String, completion: @escaping ((_ data: GitReposItem?,_ error: Error?) -> Void)) {
        requestGetRepositoryWithRequestBuilder(username: username, repo: repo).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get a repository
     - parameter username: (path) Provides publicly available information about someone with a GitHub account. 
     - parameter repo: (path)  
     - returns: Observable<GitReposItem>
     */
    open class func requestGetRepository(username: String, repo: String) -> Observable<GitReposItem> {
        return Observable.create { observer -> Disposable in
            requestGetRepository(username: username, repo: repo) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get a repository
     - GET /repos/{username}/{repo}
     - 

     - examples: [{contentType=application/json, example={
  "owner" : {
    "login" : "mojombo"
  },
  "private" : true,
  "fork" : true,
  "allow_forking" : true,
  "stargazers_count" : 0,
  "html_url" : "https://github.com/octocat/Hello-World",
  "name" : "octocat/boysenberry-repo-1",
  "description" : "My first repository on GitHub!",
  "language" : "language",
  "watchers_count" : 6,
  "url" : "https://api.github.com/users/mojombo",
  "forks_count" : 1
}}]
     - parameter username: (path) Provides publicly available information about someone with a GitHub account. 
     - parameter repo: (path)  

     - returns: RequestBuilder<GitReposItem> 
     */
    open class func requestGetRepositoryWithRequestBuilder(username: String, repo: String) -> RequestBuilder<GitReposItem> {
        var path = "/repos/{username}/{repo}"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = GitHubApiAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<GitReposItem>.Type = GitHubApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     User Info

     - parameter username: (path) Provides publicly available information about someone with a GitHub account. 
     - parameter type: (query) Can be one of all, owner, member. Default: owner (optional)
     - parameter sort: (query) Can be one of created, updated, pushed, full_name. Default: full_name (optional)
     - parameter direction: (query) Can be one of asc or desc. Default: asc when using full_name, otherwise desc (optional)
     - parameter perPage: (query) Results per page (max 100) Default: 30 (optional)
     - parameter page: (query) ResultsPage number of the results to fetch. Default: 1 (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func requestRepos(username: String, type: String? = nil, sort: String? = nil, direction: String? = nil, perPage: Int? = nil, page: Int? = nil, completion: @escaping ((_ data: GitReposList?,_ error: Error?) -> Void)) {
        requestReposWithRequestBuilder(username: username, type: type, sort: sort, direction: direction, perPage: perPage, page: page).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     User Info
     - parameter username: (path) Provides publicly available information about someone with a GitHub account. 
     - parameter type: (query) Can be one of all, owner, member. Default: owner (optional)
     - parameter sort: (query) Can be one of created, updated, pushed, full_name. Default: full_name (optional)
     - parameter direction: (query) Can be one of asc or desc. Default: asc when using full_name, otherwise desc (optional)
     - parameter perPage: (query) Results per page (max 100) Default: 30 (optional)
     - parameter page: (query) ResultsPage number of the results to fetch. Default: 1 (optional)
     - returns: Observable<GitReposList>
     */
    open class func requestRepos(username: String, type: String? = nil, sort: String? = nil, direction: String? = nil, perPage: Int? = nil, page: Int? = nil) -> Observable<GitReposList> {
        return Observable.create { observer -> Disposable in
            requestRepos(username: username, type: type, sort: sort, direction: direction, perPage: perPage, page: page) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     User Info
     - GET /users/{username}/repos
     - 

     - examples: [{contentType=application/json, example=[ {
  "owner" : {
    "login" : "mojombo"
  },
  "private" : true,
  "fork" : true,
  "allow_forking" : true,
  "stargazers_count" : 0,
  "html_url" : "https://github.com/octocat/Hello-World",
  "name" : "octocat/boysenberry-repo-1",
  "description" : "My first repository on GitHub!",
  "language" : "language",
  "watchers_count" : 6,
  "url" : "https://api.github.com/users/mojombo",
  "forks_count" : 1
}, {
  "owner" : {
    "login" : "mojombo"
  },
  "private" : true,
  "fork" : true,
  "allow_forking" : true,
  "stargazers_count" : 0,
  "html_url" : "https://github.com/octocat/Hello-World",
  "name" : "octocat/boysenberry-repo-1",
  "description" : "My first repository on GitHub!",
  "language" : "language",
  "watchers_count" : 6,
  "url" : "https://api.github.com/users/mojombo",
  "forks_count" : 1
} ]}]
     - parameter username: (path) Provides publicly available information about someone with a GitHub account. 
     - parameter type: (query) Can be one of all, owner, member. Default: owner (optional)
     - parameter sort: (query) Can be one of created, updated, pushed, full_name. Default: full_name (optional)
     - parameter direction: (query) Can be one of asc or desc. Default: asc when using full_name, otherwise desc (optional)
     - parameter perPage: (query) Results per page (max 100) Default: 30 (optional)
     - parameter page: (query) ResultsPage number of the results to fetch. Default: 1 (optional)

     - returns: RequestBuilder<GitReposList> 
     */
    open class func requestReposWithRequestBuilder(username: String, type: String? = nil, sort: String? = nil, direction: String? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<GitReposList> {
        var path = "/users/{username}/repos"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GitHubApiAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "type": type, 
                        "sort": sort, 
                        "direction": direction, 
                        "per_page": perPage?.encodeToJSON(), 
                        "page": page?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<GitReposList>.Type = GitHubApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
