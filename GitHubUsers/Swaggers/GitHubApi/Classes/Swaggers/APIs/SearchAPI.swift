//
// SearchAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift


open class SearchAPI {
    /**
     Search users

     - parameter q: (query) The query contains one or more search keywords and qualifiers.  
     - parameter sort: (query) Sorts the results of your query by number of followers or repositories, or when the person joined GitHub.  (optional)
     - parameter order: (query) Determines whether the first search result returned is the highest number of matches (desc) or lowest number of matches (asc). This parameter is ignored unless you provide sort.  (optional)
     - parameter perPage: (query) Results per page (max 100)  (optional)
     - parameter page: (query) Page number of the results to fetch.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func requestSearchUsers(q: String, sort: String? = nil, order: String? = nil, perPage: Int? = nil, page: Int? = nil, completion: @escaping ((_ data: GitSearchUserResponse?,_ error: Error?) -> Void)) {
        requestSearchUsersWithRequestBuilder(q: q, sort: sort, order: order, perPage: perPage, page: page).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Search users
     - parameter q: (query) The query contains one or more search keywords and qualifiers.  
     - parameter sort: (query) Sorts the results of your query by number of followers or repositories, or when the person joined GitHub.  (optional)
     - parameter order: (query) Determines whether the first search result returned is the highest number of matches (desc) or lowest number of matches (asc). This parameter is ignored unless you provide sort.  (optional)
     - parameter perPage: (query) Results per page (max 100)  (optional)
     - parameter page: (query) Page number of the results to fetch.  (optional)
     - returns: Observable<GitSearchUserResponse>
     */
    open class func requestSearchUsers(q: String, sort: String? = nil, order: String? = nil, perPage: Int? = nil, page: Int? = nil) -> Observable<GitSearchUserResponse> {
        return Observable.create { observer -> Disposable in
            requestSearchUsers(q: q, sort: sort, order: order, perPage: perPage, page: page) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Search users
     - GET /search/users
     - 

     - examples: [{contentType=application/json, example={
  "total_count" : 0,
  "incomplete_results" : true,
  "items" : [ {
    "gists_url" : "gists_url",
    "repos_url" : "repos_url",
    "following_url" : "following_url",
    "starred_url" : "starred_url",
    "login" : "mojombo",
    "followers_url" : "followers_url",
    "type" : "type",
    "url" : "https://api.github.com/users/mojombo",
    "subscriptions_url" : "subscriptions_url",
    "score" : 1.4658129805029452,
    "received_events_url" : "received_events_url",
    "avatar_url" : "https://secure.gravatar.com/avatar/25c7c18223fb42a4c6ae1c8db6f50f9b?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
    "events_url" : "events_url",
    "html_url" : "html_url",
    "site_admin" : true,
    "id" : 6,
    "gravatar_id" : "",
    "node_id" : "MDQ6VXNlcjE=",
    "organizations_url" : "organizations_url"
  }, {
    "gists_url" : "gists_url",
    "repos_url" : "repos_url",
    "following_url" : "following_url",
    "starred_url" : "starred_url",
    "login" : "mojombo",
    "followers_url" : "followers_url",
    "type" : "type",
    "url" : "https://api.github.com/users/mojombo",
    "subscriptions_url" : "subscriptions_url",
    "score" : 1.4658129805029452,
    "received_events_url" : "received_events_url",
    "avatar_url" : "https://secure.gravatar.com/avatar/25c7c18223fb42a4c6ae1c8db6f50f9b?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
    "events_url" : "events_url",
    "html_url" : "html_url",
    "site_admin" : true,
    "id" : 6,
    "gravatar_id" : "",
    "node_id" : "MDQ6VXNlcjE=",
    "organizations_url" : "organizations_url"
  } ]
}}]
     - parameter q: (query) The query contains one or more search keywords and qualifiers.  
     - parameter sort: (query) Sorts the results of your query by number of followers or repositories, or when the person joined GitHub.  (optional)
     - parameter order: (query) Determines whether the first search result returned is the highest number of matches (desc) or lowest number of matches (asc). This parameter is ignored unless you provide sort.  (optional)
     - parameter perPage: (query) Results per page (max 100)  (optional)
     - parameter page: (query) Page number of the results to fetch.  (optional)

     - returns: RequestBuilder<GitSearchUserResponse> 
     */
    open class func requestSearchUsersWithRequestBuilder(q: String, sort: String? = nil, order: String? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<GitSearchUserResponse> {
        let path = "/search/users"
        let URLString = GitHubApiAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "q": q, 
                        "sort": sort, 
                        "order": order, 
                        "per_page": perPage?.encodeToJSON(), 
                        "page": page?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<GitSearchUserResponse>.Type = GitHubApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
