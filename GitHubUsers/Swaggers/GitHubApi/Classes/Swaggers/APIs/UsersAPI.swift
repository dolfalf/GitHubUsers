//
// UsersAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift


open class UsersAPI {
    /**
     User Info

     - parameter username: (path) Provides publicly available information about someone with a GitHub account. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func requestUsers(username: String, completion: @escaping ((_ data: GitUserInfo?,_ error: Error?) -> Void)) {
        requestUsersWithRequestBuilder(username: username).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     User Info
     - parameter username: (path) Provides publicly available information about someone with a GitHub account. 
     - returns: Observable<GitUserInfo>
     */
    open class func requestUsers(username: String) -> Observable<GitUserInfo> {
        return Observable.create { observer -> Disposable in
            requestUsers(username: username) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     User Info
     - GET /users/{username}
     - 

     - examples: [{contentType=application/json, example={
  "repos_url" : "repos_url",
  "bio" : "bio",
  "login" : "mojombo",
  "url" : "https://api.github.com/users/mojombo",
  "followers" : 6,
  "avatar_url" : "xxx.png",
  "html_url" : "html_url",
  "following" : 1,
  "name" : "name",
  "company" : "company",
  "location" : "location",
  "id" : 0,
  "gravatar_id" : "",
  "email" : "email",
  "node_id" : "MDQ6VXNlcjE="
}}]
     - parameter username: (path) Provides publicly available information about someone with a GitHub account. 

     - returns: RequestBuilder<GitUserInfo> 
     */
    open class func requestUsersWithRequestBuilder(username: String) -> RequestBuilder<GitUserInfo> {
        var path = "/users/{username}"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = GitHubApiAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<GitUserInfo>.Type = GitHubApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
