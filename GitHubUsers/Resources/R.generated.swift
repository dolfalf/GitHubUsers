//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `Config.xcconfig`.
    static let configXcconfig = Rswift.FileResource(bundle: R.hostingBundle, name: "Config", pathExtension: "xcconfig")

    /// `bundle.url(forResource: "Config", withExtension: "xcconfig")`
    static func configXcconfig(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.configXcconfig
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 42 localization keys.
    struct localizable {
      /// en translation: 
      ///
      /// Locales: en, ja
      static let empty = Rswift.StringResource(key: "empty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation:  Error Code: %@
      ///
      /// Locales: en, ja
      static let errorCode = Rswift.StringResource(key: "ErrorCode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation:  Please check your input.
      ///
      /// Locales: en, ja
      static let checkInput = Rswift.StringResource(key: "CheckInput", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation:  Please retry later.
      ///
      /// Locales: en, ja
      static let retryLater = Rswift.StringResource(key: "RetryLater", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation:  Please update the token.
      ///
      /// Locales: en, ja
      static let updateToken = Rswift.StringResource(key: "UpdateToken", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: -
      ///
      /// Locales: en, ja
      static let hyphen = Rswift.StringResource(key: "hyphen", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 0
      ///
      /// Locales: en, ja
      static let zero = Rswift.StringResource(key: "zero", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Add some pin to show here...
      ///
      /// Locales: en, ja
      static let noPinItem = Rswift.StringResource(key: "noPinItem", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Auto
      ///
      /// Locales: en, ja
      static let auto = Rswift.StringResource(key: "auto", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, ja
      static let cancel = Rswift.StringResource(key: "cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Close
      ///
      /// Locales: en, ja
      static let close = Rswift.StringResource(key: "Close", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Connect Error
      ///
      /// Locales: en, ja
      static let connectError = Rswift.StringResource(key: "ConnectError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Dark
      ///
      /// Locales: en, ja
      static let dark = Rswift.StringResource(key: "dark", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Data Error
      ///
      /// Locales: en, ja
      static let dataError = Rswift.StringResource(key: "DataError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Delete
      ///
      /// Locales: en, ja
      static let delete = Rswift.StringResource(key: "delete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Followers %@ • Following %@
      ///
      /// Locales: en, ja
      static let follwers = Rswift.StringResource(key: "follwers", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Forbidden
      ///
      /// Locales: en, ja
      static let forbidden = Rswift.StringResource(key: "Forbidden", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: GitHub REST API(EN)
      ///
      /// Locales: en, ja
      static let gitHubApiNameEN = Rswift.StringResource(key: "gitHubApiNameEN", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: GitHub REST API(JP)
      ///
      /// Locales: en, ja
      static let gitHubApiNameJP = Rswift.StringResource(key: "gitHubApiNameJP", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: ICONS8
      ///
      /// Locales: en, ja
      static let icon8 = Rswift.StringResource(key: "icon8", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Light
      ///
      /// Locales: en, ja
      static let light = Rswift.StringResource(key: "light", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Not Found
      ///
      /// Locales: en, ja
      static let notFound = Rswift.StringResource(key: "NotFound", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Not Modified
      ///
      /// Locales: en, ja
      static let notModified = Rswift.StringResource(key: "NotModified", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Number of searches %@
      ///
      /// Locales: en, ja
      static let countTitle = Rswift.StringResource(key: "countTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Open Color GitHub
      ///
      /// Locales: en, ja
      static let openColorGit = Rswift.StringResource(key: "openColorGit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Open Color HomePage
      ///
      /// Locales: en, ja
      static let openColorHome = Rswift.StringResource(key: "openColorHome", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Pin
      ///
      /// Locales: en, ja
      static let pin = Rswift.StringResource(key: "pin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Private
      ///
      /// Locales: en, ja
      static let showPrivate = Rswift.StringResource(key: "showPrivate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Public
      ///
      /// Locales: en, ja
      static let showPublic = Rswift.StringResource(key: "showPublic", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Repositories
      ///
      /// Locales: en, ja
      static let repositories = Rswift.StringResource(key: "repositories", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Search
      ///
      /// Locales: en, ja
      static let search = Rswift.StringResource(key: "search", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Service Unavailable
      ///
      /// Locales: en, ja
      static let serviceUnavailable = Rswift.StringResource(key: "ServiceUnavailable", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Setting
      ///
      /// Locales: en, ja
      static let setting = Rswift.StringResource(key: "setting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: System
      ///
      /// Locales: en, ja
      static let system = Rswift.StringResource(key: "system", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Thank
      ///
      /// Locales: en, ja
      static let thank = Rswift.StringResource(key: "thank", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Thank You !!!🙇🏻‍♂️🙇🏻‍♂️🙇🏻‍♂️☕️☕️☕️
      ///
      /// Locales: en, ja
      static let thankTitle = Rswift.StringResource(key: "thankTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: There is no results for  %@
      ///
      /// Locales: en, ja
      static let noResults = Rswift.StringResource(key: "noResults", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Unauthorized
      ///
      /// Locales: en, ja
      static let unauthorized = Rswift.StringResource(key: "Unauthorized", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Unprocessable Entity
      ///
      /// Locales: en, ja
      static let unprocessableEntity = Rswift.StringResource(key: "UnprocessableEntity", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: User
      ///
      /// Locales: en, ja
      static let user = Rswift.StringResource(key: "user", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: User Cancel
      ///
      /// Locales: en, ja
      static let cancelError = Rswift.StringResource(key: "CancelError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: mailto:%@
      ///
      /// Locales: en, ja
      static let mailto = Rswift.StringResource(key: "mailto", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)

      /// en translation: 
      ///
      /// Locales: en, ja
      static func empty(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("empty", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "empty"
        }

        return NSLocalizedString("empty", bundle: bundle, comment: "")
      }

      /// en translation:  Error Code: %@
      ///
      /// Locales: en, ja
      static func errorCode(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("ErrorCode", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ErrorCode"
        }

        let format = NSLocalizedString("ErrorCode", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation:  Please check your input.
      ///
      /// Locales: en, ja
      static func checkInput(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CheckInput", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CheckInput"
        }

        return NSLocalizedString("CheckInput", bundle: bundle, comment: "")
      }

      /// en translation:  Please retry later.
      ///
      /// Locales: en, ja
      static func retryLater(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RetryLater", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "RetryLater"
        }

        return NSLocalizedString("RetryLater", bundle: bundle, comment: "")
      }

      /// en translation:  Please update the token.
      ///
      /// Locales: en, ja
      static func updateToken(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UpdateToken", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "UpdateToken"
        }

        return NSLocalizedString("UpdateToken", bundle: bundle, comment: "")
      }

      /// en translation: -
      ///
      /// Locales: en, ja
      static func hyphen(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hyphen", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hyphen"
        }

        return NSLocalizedString("hyphen", bundle: bundle, comment: "")
      }

      /// en translation: 0
      ///
      /// Locales: en, ja
      static func zero(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("zero", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "zero"
        }

        return NSLocalizedString("zero", bundle: bundle, comment: "")
      }

      /// en translation: Add some pin to show here...
      ///
      /// Locales: en, ja
      static func noPinItem(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("noPinItem", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "noPinItem"
        }

        return NSLocalizedString("noPinItem", bundle: bundle, comment: "")
      }

      /// en translation: Auto
      ///
      /// Locales: en, ja
      static func auto(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("auto", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "auto"
        }

        return NSLocalizedString("auto", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, ja
      static func cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cancel"
        }

        return NSLocalizedString("cancel", bundle: bundle, comment: "")
      }

      /// en translation: Close
      ///
      /// Locales: en, ja
      static func close(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Close", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Close"
        }

        return NSLocalizedString("Close", bundle: bundle, comment: "")
      }

      /// en translation: Connect Error
      ///
      /// Locales: en, ja
      static func connectError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ConnectError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ConnectError"
        }

        return NSLocalizedString("ConnectError", bundle: bundle, comment: "")
      }

      /// en translation: Dark
      ///
      /// Locales: en, ja
      static func dark(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dark", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dark"
        }

        return NSLocalizedString("dark", bundle: bundle, comment: "")
      }

      /// en translation: Data Error
      ///
      /// Locales: en, ja
      static func dataError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DataError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DataError"
        }

        return NSLocalizedString("DataError", bundle: bundle, comment: "")
      }

      /// en translation: Delete
      ///
      /// Locales: en, ja
      static func delete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delete", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "delete"
        }

        return NSLocalizedString("delete", bundle: bundle, comment: "")
      }

      /// en translation: Followers %@ • Following %@
      ///
      /// Locales: en, ja
      static func follwers(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("follwers", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "follwers"
        }

        let format = NSLocalizedString("follwers", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: Forbidden
      ///
      /// Locales: en, ja
      static func forbidden(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Forbidden", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Forbidden"
        }

        return NSLocalizedString("Forbidden", bundle: bundle, comment: "")
      }

      /// en translation: GitHub REST API(EN)
      ///
      /// Locales: en, ja
      static func gitHubApiNameEN(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gitHubApiNameEN", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "gitHubApiNameEN"
        }

        return NSLocalizedString("gitHubApiNameEN", bundle: bundle, comment: "")
      }

      /// en translation: GitHub REST API(JP)
      ///
      /// Locales: en, ja
      static func gitHubApiNameJP(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gitHubApiNameJP", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "gitHubApiNameJP"
        }

        return NSLocalizedString("gitHubApiNameJP", bundle: bundle, comment: "")
      }

      /// en translation: ICONS8
      ///
      /// Locales: en, ja
      static func icon8(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("icon8", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "icon8"
        }

        return NSLocalizedString("icon8", bundle: bundle, comment: "")
      }

      /// en translation: Light
      ///
      /// Locales: en, ja
      static func light(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("light", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "light"
        }

        return NSLocalizedString("light", bundle: bundle, comment: "")
      }

      /// en translation: Not Found
      ///
      /// Locales: en, ja
      static func notFound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NotFound", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "NotFound"
        }

        return NSLocalizedString("NotFound", bundle: bundle, comment: "")
      }

      /// en translation: Not Modified
      ///
      /// Locales: en, ja
      static func notModified(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NotModified", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "NotModified"
        }

        return NSLocalizedString("NotModified", bundle: bundle, comment: "")
      }

      /// en translation: Number of searches %@
      ///
      /// Locales: en, ja
      static func countTitle(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("countTitle", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "countTitle"
        }

        let format = NSLocalizedString("countTitle", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Open Color GitHub
      ///
      /// Locales: en, ja
      static func openColorGit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("openColorGit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "openColorGit"
        }

        return NSLocalizedString("openColorGit", bundle: bundle, comment: "")
      }

      /// en translation: Open Color HomePage
      ///
      /// Locales: en, ja
      static func openColorHome(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("openColorHome", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "openColorHome"
        }

        return NSLocalizedString("openColorHome", bundle: bundle, comment: "")
      }

      /// en translation: Pin
      ///
      /// Locales: en, ja
      static func pin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "pin"
        }

        return NSLocalizedString("pin", bundle: bundle, comment: "")
      }

      /// en translation: Private
      ///
      /// Locales: en, ja
      static func showPrivate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("showPrivate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "showPrivate"
        }

        return NSLocalizedString("showPrivate", bundle: bundle, comment: "")
      }

      /// en translation: Public
      ///
      /// Locales: en, ja
      static func showPublic(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("showPublic", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "showPublic"
        }

        return NSLocalizedString("showPublic", bundle: bundle, comment: "")
      }

      /// en translation: Repositories
      ///
      /// Locales: en, ja
      static func repositories(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("repositories", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "repositories"
        }

        return NSLocalizedString("repositories", bundle: bundle, comment: "")
      }

      /// en translation: Search
      ///
      /// Locales: en, ja
      static func search(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("search", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "search"
        }

        return NSLocalizedString("search", bundle: bundle, comment: "")
      }

      /// en translation: Service Unavailable
      ///
      /// Locales: en, ja
      static func serviceUnavailable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ServiceUnavailable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ServiceUnavailable"
        }

        return NSLocalizedString("ServiceUnavailable", bundle: bundle, comment: "")
      }

      /// en translation: Setting
      ///
      /// Locales: en, ja
      static func setting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("setting", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "setting"
        }

        return NSLocalizedString("setting", bundle: bundle, comment: "")
      }

      /// en translation: System
      ///
      /// Locales: en, ja
      static func system(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("system", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "system"
        }

        return NSLocalizedString("system", bundle: bundle, comment: "")
      }

      /// en translation: Thank
      ///
      /// Locales: en, ja
      static func thank(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("thank", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "thank"
        }

        return NSLocalizedString("thank", bundle: bundle, comment: "")
      }

      /// en translation: Thank You !!!🙇🏻‍♂️🙇🏻‍♂️🙇🏻‍♂️☕️☕️☕️
      ///
      /// Locales: en, ja
      static func thankTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("thankTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "thankTitle"
        }

        return NSLocalizedString("thankTitle", bundle: bundle, comment: "")
      }

      /// en translation: There is no results for  %@
      ///
      /// Locales: en, ja
      static func noResults(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("noResults", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "noResults"
        }

        let format = NSLocalizedString("noResults", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Unauthorized
      ///
      /// Locales: en, ja
      static func unauthorized(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Unauthorized", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Unauthorized"
        }

        return NSLocalizedString("Unauthorized", bundle: bundle, comment: "")
      }

      /// en translation: Unprocessable Entity
      ///
      /// Locales: en, ja
      static func unprocessableEntity(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UnprocessableEntity", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "UnprocessableEntity"
        }

        return NSLocalizedString("UnprocessableEntity", bundle: bundle, comment: "")
      }

      /// en translation: User
      ///
      /// Locales: en, ja
      static func user(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("user", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "user"
        }

        return NSLocalizedString("user", bundle: bundle, comment: "")
      }

      /// en translation: User Cancel
      ///
      /// Locales: en, ja
      static func cancelError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CancelError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CancelError"
        }

        return NSLocalizedString("CancelError", bundle: bundle, comment: "")
      }

      /// en translation: mailto:%@
      ///
      /// Locales: en, ja
      static func mailto(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("mailto", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "mailto"
        }

        let format = NSLocalizedString("mailto", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R {
  fileprivate init() {}
}
